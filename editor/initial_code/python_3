def checkio(data):
    """
    make stripe by scissors and glue
    """
    return ''


if __name__ == '__main__':
    # This part is using only for self-checking and not necessary for auto-testing
    def check_solution(func, data):
        try:
            solver = func(data[:])
            stripe = eval(solver)
            if any((type(stripe) != str,
                    len(stripe) != sum(len(ribbon) for ribbon in data),
                    any(a not in '01' for a in stripe),
                    any(a == b for a, b in zip(stripe, stripe[1:])))):
                return False
            cuts = sum(a == b for ribbon in data for a, b in zip(ribbon, ribbon[1:]))
            commutator = [[False] * len(ribbon) for ribbon in data]
            data = ['0' * len(ribbon) for ribbon in data]
            res = eval(solver)
            if '1' in res:
                return False
            targets = []
            for i, ribbon in enumerate(data):
                ribbon = list(ribbon)
                for j in range(len(ribbon)):
                    ribbon[j] = '1'
                    data[i] = ''.join(ribbon)
                    res = eval(solver)
                    if res.count('1') != 1:
                        return False
                    k = res.index('1')
                    targets.append(k)
                    commutator[i][j], ribbon[j] = k, '0'
                data[i] = ''.join(ribbon)
            targets.sort()
            if targets != list(range(len(stripe))):
                return False
            for i, switches in enumerate(commutator):
                for a, b in zip(switches, switches[1:]):
                    cuts -= abs(a - b) != 1
            return not cuts
        except Exception:
            return False

    assert check_solution(checkio, ['11000101', '101']), 'Baisc sample'
